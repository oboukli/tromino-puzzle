# Copyright (c) Omar Boukli-Hacene. All rights reserved.
# Distributed under an MIT-style license that can be
# found in the LICENSE file.

# SPDX-License-Identifier: MIT

name: Emscripten build for WebAssembly

on:
  push:
    branches:
      - feature/ci-emscripten-dev
  workflow_dispatch:

permissions: {}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    env:
      BUILD_PATH: ${{ github.workspace }}/tromino-puzzle/dist/web

    outputs:
      dist-checksum: ${{ steps.dist-checksum.outputs.dist_checksum }}

    steps:
      - name: Install LLVM
        run: |-
          wget --no-check-certificate -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy main'
          sudo add-apt-repository 'deb-src http://apt.llvm.org/jammy/ llvm-toolchain-jammy main'
          sudo apt update
          sudo apt-get install python3-lldb-18
          # LLVM
          sudo apt-get install libllvm-18-ocaml-dev libllvm18 llvm-18 llvm-18-dev llvm-18-doc llvm-18-examples llvm-18-runtime
          # Clang and co
          sudo apt-get install clang-18 clang-tools-18 clang-18-doc libclang-common-18-dev libclang-18-dev libclang1-18 clang-format-18 python3-clang-18 clangd-18 clang-tidy-18
          # compiler-rt
          sudo apt-get install libclang-rt-18-dev
          # polly
          sudo apt-get install libpolly-18-dev
          # libfuzzer
          sudo apt-get install libfuzzer-18-dev
          # lld (linker)
          sudo apt-get install lld-18
          # libc++
          sudo apt-get install libc++-18-dev libc++abi-18-dev
          # OpenMP
          sudo apt-get install libomp-18-dev
          # libclc
          sudo apt-get install libclc-18-dev
          # libunwind
          sudo apt-get install libunwind-18-dev
          # mlir
          sudo apt-get install libmlir-18-dev mlir-18-tools
          # bolt
          sudo apt-get install libbolt-18-dev bolt-18
          # flang
          sudo apt-get install flang-18
          # wasm support
          sudo apt-get install libclang-rt-18-dev-wasm32 libclang-rt-18-dev-wasm64 libc++-18-dev-wasm32 libc++abi-18-dev-wasm32 libclang-rt-18-dev-wasm32 libclang-rt-18-dev-wasm64
          sudo apt-get install clang lld llvm llvm-dev clang-tools
          # sudo apt-get install clang-format clang-tidy clang-tools clang clangd libc++-dev libc++1 libc++abi-dev libc++abi1 libclang-dev libclang1 liblldb-dev libllvm-ocaml-dev libomp-dev libomp5 lld lldb llvm-dev llvm-runtime llvm python3-clang
          sudo apt-get install clang-format clang-tidy clang-tools clang clangd libc++-dev libc++1 libc++abi-dev libc++abi1 libclang-dev libclang1 libllvm-ocaml-dev libomp-dev libomp5 lld llvm-dev llvm-runtime llvm python3-clang
      - name: Install binaryen
        run: |-
          sudo add-apt-repository universe
          sudo apt update
          sudo apt install binaryen

      - name: Check out Emscripten repository
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
        with:
          ref: main # DONT-MERGE/strict-fixes
          repository: oboukli/emscripten
          path: emsdk
          persist-credentials: false

      - name: Emscripten SDK cache
        id: emscripten-sdk-cache
        uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84
        with:
          path: |-
            emsdk/downloads
            emsdk/node
            emsdk/upstream
          key: >-
            emscripten-sdk-cache-FORK-${{ hashFiles(
              'ci/cache-key-salt/emscripten.txt',
              'emsdk/emsdk_manifest.json'
            ) }}

      # ./emsdk install
      # ./emsdk activate
      - name: Install Emscripten SDK
        run: |-
          ./emcc --generate-config
          ./bootstrap
        working-directory: emsdk

      - name: Check out main repository
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
        with:
          path: tromino-puzzle
          persist-credentials: false

      # source ${{ github.workspace }}/emsdk/emsdk_env.sh
      - name: Make
        run: |-
          /home/runner/work/tromino-puzzle/tromino-puzzle/emsdk/emmake make --jobs=$((($(nproc) * 15) / 10))
        working-directory: tromino-puzzle/emscripten

      - name: Create distribution archive
        run: tar --create --file=dist.tar ./*
        working-directory: ${{ env.BUILD_PATH }}

      - name: Compute SHA512 of distribution archive
        id: dist-checksum
        run: >-
          echo "dist_checksum=$(sha512sum --binary './dist.tar')"
          >> $GITHUB_OUTPUT
        working-directory: ${{ env.BUILD_PATH }}

      - name: Compute SHA512 of build artifacts
        run: |-
          ls -Al './scripts/litro/' | grep -v '^d'
          ls -Al './scripts/trmn/' | grep -v '^d'
          sha512sum --binary './scripts/litro/litro-wasm.js'
          sha512sum --binary './scripts/litro/litro-wasm.wasm'
          sha512sum --binary './scripts/trmn/trmn-wasm.js'
          sha512sum --binary './scripts/trmn/trmn-wasm.wasm'
        working-directory: ${{ env.BUILD_PATH }}

      - name: Store distribution archive
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
        continue-on-error: false
        with:
          if-no-files-found: error
          name: tromino-puzzle-web-dist
          path: ${{ env.BUILD_PATH }}/dist.tar
